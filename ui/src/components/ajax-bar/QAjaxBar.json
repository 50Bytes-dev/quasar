{
  "meta": {
    "docsUrl": "https://v2.quasar.dev/vue-components/ajax-bar"
  },

  "props": {
    "position": {
      "type": "String",
      "desc": "Position within window of where QAjaxBar should be displayed",
      "default": "'top'",
      "values": [ "'top'", "'right'", "'bottom'", "'left'" ],
      "category": "style"
    },

    "size": {
      "extends": "size",
      "default": "'2px'"
    },

    "color": {
      "extends": "color"
    },

    "reverse": {
      "type": "Boolean",
      "desc": "Reverse direction of progress",
      "category": "behavior"
    },

    "skip-hijack": {
      "type": "Boolean",
      "desc": "Skip Ajax hijacking (not a reactive prop)",
      "category": "behavior"
    },

    "hijack-filter": {
      "type": "Function",
      "desc": "Filter which URL should trigger start() + stop()",
      "params": {
        "url": {
          "type": "String",
          "desc": "The URL being triggered",
          "examples": [ "'https://some.url/path'" ]
        }
      },
      "returns": {
        "type": "Boolean",
        "desc": "Should the URL received as param trigger start() + stop()?"
      },
      "category": "behavior",
      "addedIn": "v2.4.5"
    }
  },

  "events": {
    "start": {
      "desc": "Emitted when bar is triggered to appear"
    },

    "stop": {
      "desc": "Emitted when bar has finished its job"
    }
  },

  "methods": {
    "start": {
      "desc": "Notify bar you are waiting for a new process to finish",
      "params": {
        "columns": {
          "type": "Object",
          "desc": "The column definitions (Array of Objects)",
          "examples": [ "# :columns=\"tableColumns\"" ],
          "category": "column",
          "definition": {
            "name": {
              "type": "String",
              "required": true,
              "desc": "Unique id, identifies column, (used by pagination.sortBy, 'body-cell-[name]' slot, ...)",
              "examples": [ "'desc'" ]
            },
            "label": {
              "type": "String",
              "required": true,
              "desc": "Label for header",
              "examples": [ "'Dessert (100g serving)'" ]
            },
            "field": {
              "type": [ "String", "Function" ],
              "required": true,
              "desc": "Row Object property to determine value for this column or function which maps to the required property",
              "params": {
                "row": {
                  "type": "Object",
                  "required": true,
                  "desc": "The current row being processed",
                  "examples": [ "{ name: 'Lorem Ipsum', prices: { active: 19, old: 25, list: 29 } }" ]
                }
              },
              "returns": {
                "type": "Any",
                "desc": "Value for this column",
                "examples": [ "'19'", "19" ]
              },
              "examples": [ "'name'", "row => row.prices.active" ]
            },
            "required": {
              "type": "Boolean",
              "desc": "If we use visible-columns, this col will always be visible"
            },
            "align": {
              "type": "String",
              "desc": "Horizontal alignment of cells in this column",
              "values": [ "'left'", "'right'", "'center'" ],
              "default": "'right'"
            },
            "sortable": {
              "type": "Boolean",
              "desc": "Tell QTable you want this column sortable",
              "default": "false"
            },
            "sort": {
              "type": "Function",
              "desc": "Compare function if you have some custom data or want a specific way to compare two rows; rows with null/undefined values will get sorted without triggering this method (use 'rawSort' instead if you want to handle those values too)",
              "examples": ["(a, b, rowA, rowB) => parseInt(a, 10) - parseInt(b, 10)"],
              "params": {
                "a": {
                  "type": "Any",
                  "required": true,
                  "desc": "Value of the first comparison term",
                  "examples": [ "123", "'abc'" ]
                },
                "b": {
                  "type": "Any",
                  "required": true,
                  "desc": "Value of the second comparison term",
                  "examples": [ "123", "'abc'" ]
                },
                "rowA": {
                  "type": "Object",
                  "required": true,
                  "desc": "Full Row object in which is contained the first term",
                  "examples": [ "{ name: 'Potassium', value: 'K' }" ]
                },
                "rowB": {
                  "type": "Object",
                  "required": true,
                  "desc": "Full Row object in which is contained the second term",
                  "examples": [ "{ name: 'Fluorine', value: 'F' }" ]
                }
              },
              "returns": {
                "type": "Number",
                "desc": "Comparison result of term 'a' with term 'b'. Less than 0 when 'a' should come first; greater than 0 if 'b' should come first; equal to 0 if their position must not be changed with respect to each other",
                "examples": [ "-1", "0", "1" ]
              }
            },
            "rawSort": {
              "type": "Function",
              "desc": "Compare function if you have some custom data or want a specific way to compare two rows; includes rows with null/undefined values (use 'sort' instead if you don't want that)",
              "examples": ["(a, b, rowA, rowB) => parseInt(a, 10) - parseInt(b, 10)"],
              "params": {
                "a": {
                  "type": "Any",
                  "required": true,
                  "desc": "Value of the first comparison term",
                  "examples": [ "123", "'abc'" ]
                },
                "b": {
                  "type": "Any",
                  "required": true,
                  "desc": "Value of the second comparison term",
                  "examples": [ "123", "'abc'" ]
                },
                "rowA": {
                  "type": "Object",
                  "required": true,
                  "desc": "Full Row object in which is contained the first term",
                  "examples": [ "{ name: 'Potassium', value: 'K' }" ]
                },
                "rowB": {
                  "type": "Object",
                  "required": true,
                  "desc": "Full Row object in which is contained the second term",
                  "examples": [ "{ name: 'Fluorine', value: 'F' }" ]
                }
              },
              "returns": {
                "type": "Number",
                "desc": "Comparison result of term 'a' with term 'b'. Less than 0 when 'a' should come first; greater than 0 if 'b' should come first; equal to 0 if their position must not be changed with respect to each other",
                "examples": [ "-1", "0", "1" ]
              },
              "addedIn": "v2.13.0"
            },
            "sortOrder": {
              "type": "String",
              "desc": "Set column sort order: 'ad' (ascending-descending) or 'da' (descending-ascending); Overrides the 'column-sort-order' prop",
              "values": [ "'ad'", "'da'" ],
              "default": "'ad'"
            },
            "format": {
              "type": "Function",
              "desc": "Function you can apply to format your data",
              "examples": [ "(val, row) => `${val}%`", "val => val ? /* Unicode checkmark checked */ '\u2611' : /* Unicode checkmark unchecked */ '\u2610'" ],
              "params": {
                "val": {
                  "type": "Any",
                  "required": true,
                  "desc": "Value of the cell",
                  "examples": [ "123", "'abc'" ]
                },
                "row": {
                  "type": "Object",
                  "required": true,
                  "desc": "Full Row object in which the cell is contained",
                  "examples": [ "{ name: 'Potassium', value: 'K' }" ]
                }
              },
              "returns": {
                "type": "Any",
                "desc": "The resulting formatted value",
                "examples": [ "'20%'" ]
              }
            },
            "style": {
              "type": [ "String", "Function" ],
              "desc": "Style to apply on normal cells of the column",
              "params": {
                "row": {
                  "type": "Object",
                  "required": true,
                  "desc": "The current row being processed",
                  "examples": [ "{ name: 'Frozen Yogurt', calories: 159 }" ]
                }
              },
              "returns": {
                "type": "String",
                "__exemption": [ "desc" ]
              },
              "examples": [
                "'width: 500px'",
                "row => (row.calories % 2 === 0 ? 'width: 10px' : 'font-size: 2em; font-weight: bold')"
              ]
            },
            "classes": {
              "type": [ "String", "Function" ],
              "desc": "Classes to add on normal cells of the column",
              "params": {
                "row": {
                  "type": "Object",
                  "required": true,
                  "desc": "The current row being processed",
                  "examples": [ "{ name: 'Frozen Yogurt', calories: 159 }" ]
                }
              },
              "returns": {
                "type": "String",
                "__exemption": [ "desc" ]
              },
              "examples": [
                "'my-special-class bg-primary'",
                "row => (row.calories % 2 === 0 ? 'bg-green text-white' : 'bg-yellow')"
              ]
            },
            "headerStyle": {
              "type": "String",
              "desc": "Style to apply on header cells of the column",
              "examples": [ "'width: 500px'" ]
            },
            "headerClasses": {
              "type": "String",
              "desc": "Classes to add on header cells of the column",
              "examples": [ "'my-special-class'" ]
            }
          }
        }
      },
      "returns": {
        "type": "Number",
        "desc": "Number of active simultaneous sessions"
      }
    },

    "increment": {
      "desc": "Manually trigger a bar progress increment",
      "params": {
        "amount": {
          "type": "Number",
          "desc": "Amount (0 < x <= 100) to increment with"
        }
      },
      "returns": {
        "type": "Number",
        "desc": "Number of active simultaneous sessions"
      }
    },

    "stop": {
      "desc": "Notify bar that one process you were waiting has finished",
      "returns": {
        "type": "Number",
        "desc": "Number of active simultaneous sessions"
      }
    }
  }
}
